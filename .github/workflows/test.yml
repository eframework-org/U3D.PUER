name: 单元测试

on:
  workflow_dispatch:
    inputs:
      unity_versions:
        description: '引擎版本：https://unity.com/releases/editor/archive'
        required: false
        type: string
        default: '["2021.3.30f1", "2022.3.60f1", "6000.0.32f1"]'
      test_modes:
        description: '测试模式：EditMode/PlayMode'
        required: false
        type: string
        default: '["EditMode", "PlayMode"]'
  workflow_call:
    outputs:
      test_passed:
        description: "测试是否通过"
        value: ${{ jobs.test.outputs.passed }}
    inputs:
      unity_versions:
        description: '引擎版本：https://unity.com/releases/editor/archive'
        required: false
        type: string
        default: '["2021.3.30f1", "2022.3.60f1", "6000.0.32f1"]'
      test_modes:
        description: '测试模式：EditMode/PlayMode'
        required: false
        type: string
        default: '["EditMode", "PlayMode"]' 
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

permissions:
  checks: write
  contents: read
  actions: read
  security-events: write

jobs:
  test:
    name: 测试 ${{ matrix.unityVersion }}.${{ matrix.testMode }} 环境
    runs-on: windows-latest
    env:
      TZ: 'Asia/Shanghai'
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Package/Samples~
        unityVersion: ${{ fromJson(github.event.inputs.unity_versions || inputs.unity_versions) }}
        testMode: ${{ fromJson(github.event.inputs.test_modes || inputs.test_modes) }}
    outputs:
      passed: ${{ steps.tests.conclusion == 'success' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          lfs: true
          path: Package

      - name: 检出缓存
        uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ runner.os }}-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-${{ runner.os }}-

      - name: 准备镜像
        shell: bash
        run: |
          # 创建 Dockerfile
          cat > Dockerfile << EOF
          # 基于 unityci/editor 镜像
          FROM unityci/editor:windows-${{ matrix.unityVersion }}-windows-il2cpp-3

          # 下载并安装 Node.js
          RUN powershell -Command \
              Write-Host "下载 Node.js"; \
              Invoke-WebRequest -Uri "https://nodejs.org/dist/v18.16.0/node-v18.16.0-x64.msi" -OutFile nodejs.msi; \
              Write-Host "安装 Node.js"; \
              Start-Process msiexec.exe -ArgumentList '/i', 'nodejs.msi', '/quiet', '/norestart' -NoNewWindow -Wait; \
              Write-Host "Node.js 安装完成"; \
              Remove-Item -Force nodejs.msi

          # 下载并配置 MinIO
          RUN powershell -Command \
              Write-Host "创建 MinIO 目录"; \
              New-Item -Path "C:\\MinIO" -ItemType Directory -Force; \
              New-Item -Path "C:\\MinIO\\data" -ItemType Directory -Force; \
              Write-Host "下载 MinIO 服务器..."; \
              Invoke-WebRequest -Uri "https://dl.min.io/server/minio/release/windows-amd64/minio.exe" -OutFile "C:\\MinIO\\minio.exe"; \
              Write-Host "下载 MinIO 客户端..."; \
              Invoke-WebRequest -Uri "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile "C:\\MinIO\\mc.exe"; \
              Write-Host "MinIO 安装完成"

          # 创建启动脚本
          RUN powershell -Command \
              Write-Host "创建启动脚本..."; \
              New-Item -Path "C:\\entrypoint.cmd" -ItemType File -Force; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value '@echo off'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'set MINIO_ROOT_USER="admin"'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'set MINIO_ROOT_PASSWORD="adminadmin"'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'start /b minio server C:\\MinIO\\data --console-address :9090 --address :9000 > C:\\MinIO\\minio.log'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value ':CHECK_MINIO_READY'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'timeout /t 1 /nobreak > nul'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'curl -s -f -o nul http://localhost:9000/minio/health/ready'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'if %ERRORLEVEL% neq 0 goto CHECK_MINIO_READY'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'mc alias set myminio http://localhost:9000 admin adminadmin'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'mc mb myminio/default'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value 'mc anonymous set public myminio/default'; \
              Add-Content -Path "C:\\entrypoint.cmd" -Value '%*'; \
              Write-Host "启动脚本已创建";

          # 设置环境变量
          SHELL ["cmd", "/S", "/C"]
          RUN setx /M PATH "%PATH%;C:\\MinIO"

          # 设置容器入口
          ENTRYPOINT "C:\\entrypoint.cmd"
          EOF
          
          # 构建镜像
          docker build -t unity-windows-editor-nodejs:latest .
          
          # 显示镜像
          docker images | grep unity-windows-editor-nodejs
      
      - name: 运行测试
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          TZ: 'Asia/Shanghai'
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: Results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: 测试 ${{ matrix.unityVersion }}.${{ matrix.testMode }} 报告
          customImage: unity-windows-editor-nodejs:latest

      - name: 上传报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test#${{ github.run_number }}.${{ matrix.unityVersion }}.${{ matrix.testMode }}.Reports
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 14